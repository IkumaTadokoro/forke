/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query SearchPullRequest($searchQuery: String!, $after: String) {\n    search(type: ISSUE, first: 100, query: $searchQuery, after: $after) {\n      __typename\n      issueCount\n      nodes {\n        ... on PullRequest {\n          __typename\n          id\n          title\n          number\n          url\n          repository {\n            owner {\n              login\n            }\n            name\n          }\n          author {\n            login\n          }\n          baseRefName\n          headRefName\n          # 本来はページネーションで取得すべきだが、巨大なOSSでもない限りラベルが大量についているケースは少ないため、3件のみ取得している。\n          labels(first: 3) {\n            nodes {\n              name\n            }\n          }\n          isDraft\n          isReadByViewer\n          state\n          additions\n          deletions\n          changedFiles\n          commits(first: 1) {\n            nodes {\n              commit {\n                commitUrl\n                message\n                committedDate\n                authoredDate\n              }\n            }\n          }\n          # force pushを行うと、コミット履歴が消えてしまう。LTを正しく計算するために、HEAD_REF_FORCE_PUSHED_EVENTを取得する。\n          # このイベントはforce pushが行われる度に発生し、force push前後のコミット情報を含んでいる。\n          # 最初に発生したforce pushの変更前のコミット（beforeCommit）がPRに紐づく最初のコミットになる。\n          timelineItems(first: 1, itemTypes: HEAD_REF_FORCE_PUSHED_EVENT) {\n            nodes {\n              ... on HeadRefForcePushedEvent {\n                beforeCommit {\n                  commitUrl\n                  message\n                  committedDate\n                  authoredDate\n                }\n              }\n            }\n          }\n          reviews(first: 1) {\n            nodes {\n              ... on PullRequestReview {\n                createdAt\n              }\n            }\n          }\n          reviewRequests(first: 5) {\n            nodes {\n              requestedReviewer {\n                __typename\n                ... on Mannequin {\n                  login\n                }\n                ... on User {\n                  login\n                }\n                ... on Team {\n                  name\n                }\n              }\n            }\n          }\n          totalCommentsCount\n          createdAt\n          updatedAt\n          publishedAt\n          closedAt\n          mergedAt\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.SearchPullRequestDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchPullRequest($searchQuery: String!, $after: String) {\n    search(type: ISSUE, first: 100, query: $searchQuery, after: $after) {\n      __typename\n      issueCount\n      nodes {\n        ... on PullRequest {\n          __typename\n          id\n          title\n          number\n          url\n          repository {\n            owner {\n              login\n            }\n            name\n          }\n          author {\n            login\n          }\n          baseRefName\n          headRefName\n          # 本来はページネーションで取得すべきだが、巨大なOSSでもない限りラベルが大量についているケースは少ないため、3件のみ取得している。\n          labels(first: 3) {\n            nodes {\n              name\n            }\n          }\n          isDraft\n          isReadByViewer\n          state\n          additions\n          deletions\n          changedFiles\n          commits(first: 1) {\n            nodes {\n              commit {\n                commitUrl\n                message\n                committedDate\n                authoredDate\n              }\n            }\n          }\n          # force pushを行うと、コミット履歴が消えてしまう。LTを正しく計算するために、HEAD_REF_FORCE_PUSHED_EVENTを取得する。\n          # このイベントはforce pushが行われる度に発生し、force push前後のコミット情報を含んでいる。\n          # 最初に発生したforce pushの変更前のコミット（beforeCommit）がPRに紐づく最初のコミットになる。\n          timelineItems(first: 1, itemTypes: HEAD_REF_FORCE_PUSHED_EVENT) {\n            nodes {\n              ... on HeadRefForcePushedEvent {\n                beforeCommit {\n                  commitUrl\n                  message\n                  committedDate\n                  authoredDate\n                }\n              }\n            }\n          }\n          reviews(first: 1) {\n            nodes {\n              ... on PullRequestReview {\n                createdAt\n              }\n            }\n          }\n          reviewRequests(first: 5) {\n            nodes {\n              requestedReviewer {\n                __typename\n                ... on Mannequin {\n                  login\n                }\n                ... on User {\n                  login\n                }\n                ... on Team {\n                  name\n                }\n              }\n            }\n          }\n          totalCommentsCount\n          createdAt\n          updatedAt\n          publishedAt\n          closedAt\n          mergedAt\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchPullRequest($searchQuery: String!, $after: String) {\n    search(type: ISSUE, first: 100, query: $searchQuery, after: $after) {\n      __typename\n      issueCount\n      nodes {\n        ... on PullRequest {\n          __typename\n          id\n          title\n          number\n          url\n          repository {\n            owner {\n              login\n            }\n            name\n          }\n          author {\n            login\n          }\n          baseRefName\n          headRefName\n          # 本来はページネーションで取得すべきだが、巨大なOSSでもない限りラベルが大量についているケースは少ないため、3件のみ取得している。\n          labels(first: 3) {\n            nodes {\n              name\n            }\n          }\n          isDraft\n          isReadByViewer\n          state\n          additions\n          deletions\n          changedFiles\n          commits(first: 1) {\n            nodes {\n              commit {\n                commitUrl\n                message\n                committedDate\n                authoredDate\n              }\n            }\n          }\n          # force pushを行うと、コミット履歴が消えてしまう。LTを正しく計算するために、HEAD_REF_FORCE_PUSHED_EVENTを取得する。\n          # このイベントはforce pushが行われる度に発生し、force push前後のコミット情報を含んでいる。\n          # 最初に発生したforce pushの変更前のコミット（beforeCommit）がPRに紐づく最初のコミットになる。\n          timelineItems(first: 1, itemTypes: HEAD_REF_FORCE_PUSHED_EVENT) {\n            nodes {\n              ... on HeadRefForcePushedEvent {\n                beforeCommit {\n                  commitUrl\n                  message\n                  committedDate\n                  authoredDate\n                }\n              }\n            }\n          }\n          reviews(first: 1) {\n            nodes {\n              ... on PullRequestReview {\n                createdAt\n              }\n            }\n          }\n          reviewRequests(first: 5) {\n            nodes {\n              requestedReviewer {\n                __typename\n                ... on Mannequin {\n                  login\n                }\n                ... on User {\n                  login\n                }\n                ... on Team {\n                  name\n                }\n              }\n            }\n          }\n          totalCommentsCount\n          createdAt\n          updatedAt\n          publishedAt\n          closedAt\n          mergedAt\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;